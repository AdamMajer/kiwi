#================
# FILE          : KIWISchema.rnc
#****************
# PROJECT       : OpenSUSE Build-Service
# COPYRIGHT     : (c) 2006 SUSE LINUX Products GmbH, Germany
#               :
# AUTHOR        : Thomas Schraitle <toms@suse.de>
# AUTHOR        : Marcus Schaefer <ms@suse.de>
#               :
# BELONGS TO    : Operating System images
#               :
# DESCRIPTION   : This is the RELAX NG Schema for KIWI
#               : configuration files. The schema is maintained
#               : in the relax compact syntax. Any changes should
#               : made in !! *** KIWISchema.rnc *** !!
#               : 
#               :
# STATUS        : Development
#****************
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace xsi = "http://www.w3.org/2001/XMLSchema-instance"
datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"
namespace db  = "http://docbook.org/ns/docbook"

db:info [
	db:releaseinfo [
		"$Id: kiwi.rnc 2957 2008-01-11 12:53:39Z thomas-schraitle $"
	]
	db:releaseinfo [ "RNC Schema Version 3.7" ]
	db:pubdate [ "START" ]
	db:pubdate [ "2008-01-08" ]
]

size-type = xsd:token {pattern = "\d*|image"}
volume-size-type = xsd:token {pattern = "\d+|\d+M|\d+G"}
image-name = xsd:token {pattern = "[^\s/]+"}
locale-name = xsd:token {pattern = "[a-z]{2}_[A-Z]{2}(,[a-z]{2}_[A-Z]{2})*"}

#==========================================
# start with image description
#
start =
	## The start pattern of an image
	k.image

#==========================================
# main block: <image>
#
div {
	k.image.name.attribute = k.name.attribute
	k.image.displayname.attribute = k.displayname.attribute
	k.image.noNamespaceSchemaLocation.attribute =
		## The location of the XSD Schema (not relevant for RELAX NG or DTD)
		attribute xsi:noNamespaceSchemaLocation { xsd:anyURI }
	k.image.schemaLocation.attribute =
		## A pair of URI references: First is a namespace name,
		## second the location of the XSD Schema
		## (not relevant for RELAX NG or DTD)
		attribute xsi:schemaLocation { xsd:anyURI }
	k.image.inherit.attribute =
		## Path to an image description directory from which
		## the package Information is inherited
		attribute inherit { text }
	k.image.schemaversion.attribute =
		## The allowed Schema version (fixed value)
		attribute schemaversion { "3.7" }
	k.image.kiwirevision.attribute =
		## A kiwi SVN revision number which is known to build
		## a working image from this description. If the kiwi SVN
		## revision is less than the specified value the
		## process will exit.
		attribute kiwirevision { xsd:nonNegativeInteger }
	k.image.id =
		## An identification number which is represented in a file
		## named /etc/ImageID
		attribute id { xsd:string {length="10"} }
	k.image.attlist = k.image.name.attribute 
		& k.image.displayname.attribute?
		& k.image.inherit.attribute?
		& k.image.kiwirevision.attribute?
		& k.image.id?
		& k.image.schemaversion.attribute
		& ( k.image.noNamespaceSchemaLocation.attribute?
		  | k.image.schemaLocation.attribute? )?

	k.image =
		## The root element of the configuration file		
		[
		db:para [
			"Each KIWI configuration file consists of a root element\x{a}" ~
			"image."
		]
		]
		element image {
			k.image.attlist &
			k.description &
			k.preferences+ &
			k.profiles? &
			k.instsource? &
			k.users* &
			k.drivers* &
			k.repository+ &
			k.deploy? &
			k.split? &
			k.packages* &
			k.vmwareconfig? &
			k.xenconfig? &
			k.lvmvolumes?
		}
}

#==========================================
# common attributes
#
k.id.attribute          =
	## An ID
	attribute id { xsd:ID }
k.name.attribute        =
	## A name
	attribute name { text }
k.replaces.attribute    =
	## Replace package with some other package
	attribute replaces { text }
k.bootinclude.attribute =
	## Indicates that this package should be part of
	## the boot image (initrd) too. This attribute
	## can be used to include for example branding packages
	## specified in the system image description to become
	## part of the boot image also
	attribute bootinclude { xsd:boolean }
k.bootdelete.attribute =
	## Indicates that this package should be removed from
	## the boot image (initrd). the attribute is only
	## evaluated if the bootinclude attribute is specified
	## along with it too
	attribute bootdelete { xsd:boolean }
k.displayname.attribute =
	## A friendly display name. Used in the boot menu
	## for isolinux and grub
	attribute displayname { text }
k.arch.attribute        =
	## An architecture
	attribute arch { text }
k.description.attribute =
	## A short description
	attribute description { text }
k.path.attribute        =
	## A path
	attribute path { text }
k.profiles.attribute    =
	## A profile name which binds the section to this name
	attribute profiles { text }
k.pwd.attribute         =
	## The password
	attribute pwd { text }
k.script.attribute      =
	## A script hook for meta files to be called after the
	## file was fetched
	attribute script { text }
k.source.attribute      =
	## A location where packages can be found to build an
	## installation source from
	attribute source { text }
k.size.attribute        =
	## A partition size or optional image size
	attribute size { text }
k.dest.attribute        =
	## Destination of a ressource
	attribute dest { text }
k.username.attribute    =
	## A name of a user
	attribute username { text }

#==========================================
# common element <author>
#
div {
	k.author.attlist = empty
	k.author =
		## Author of the image
		element author { k.author.attlist, text }
}

#==========================================
# common element <configuration>
#
div {
	k.configuration.source.attribute = k.source.attribute
	k.configuration.dest.attribute = k.dest.attribute
	k.configuration.arch.attribute = k.arch.attribute
	k.configuration.attlist = 
		k.configuration.source.attribute &
		k.configuration.dest.attribute &
		k.configuration.arch.attribute?

	k.configuration =
		## Specifies Configuration files
		[
		db:para [
			"As part of the network deploy configuration this section\x{a}" ~
			"specifies the configuration files which should be included\x{a}"~
			"into the image after deployment."
		]
		]
		element configuration {
			k.configuration.attlist,
			empty
		}
}

#==========================================
# common element <commandline>
#
div {
	k.commandline.attlist = empty
	k.commandline = 
		## Specifies the Kernel Boot Commandline
		[
		db:para [
			"As part of the network deploy configuration this section\x{a}"~
			"specifies the kernel boot commandline used when the image\x{a}"~
			"gets deployed."
		]
		]
		element commandline {
			k.commandline.attlist,
			text
		}
}

#==========================================
# common element <contact>
#
div {
	k.contact.attlist = empty
	k.contact = 
		## Contact Information from the Author, like Email etc.
		element contact {
			k.contact.attlist,
			text
		}
}

#==========================================
# common element <defaultbaseroot>
#
div {
	k.defaultbaseroot.attlist = empty
	k.defaultbaseroot =
		## Default Path if baseroot Option is not Specified
		element defaultbaseroot {
			k.defaultbaseroot.attlist,
			text
		}
}

#==========================================
# common element <defaultdestination>
#
div {
	k.defaultdestination.attlist = empty
	k.defaultdestination =
		## Default Path if destdir Otion is Not Specified
		element defaultdestination {
			k.defaultdestination.attlist,
			text
		}
}

#==========================================
# common element <defaultroot>
#
div {
	k.defaultroot.attlist = empty
	k.defaultroot =
		## Default Root Directory Name if root Option is Not Specified
		element defaultroot {
			k.defaultroot.attlist,
			text
		}
}

#==========================================
# common element <file>
#
div {
	k.file.name.attribute = k.name.attribute
	k.file.arch.attribute = k.arch.attribute
	k.file.attlist =
		k.file.name.attribute &
		k.file.arch.attribute?
	k.file =
		## A Pointer to a File
		element file {
			k.file.attlist,
			empty
		}
}

#==========================================
# common element <except>
#
div {
	k.except.name.attribute = k.name.attribute
	k.except.attlist =
		k.except.name.attribute
	k.except =
		## A Pointer to a File which should be excluded
		element except {
			k.except.attlist,
			empty
		}
}

#==========================================
# common element <ignore>
#
div {
	k.ignore.name.attribute = k.name.attribute
	k.ignore.attlist = k.ignore.name.attribute
	k.ignore = 
		## Ignores a Package
		element ignore {
			k.ignore.attlist,
			empty
		}
}

#==========================================
# common element <initrd>
#
div {
	k.initrd.attlist = empty
	k.initrd =
		## Specifies where the Boot Image can be Found
		[
		db:para [
			"As part of the network deploy configuration this element\x{a}"~
			"specifies where the boot image (initrd) can be found."
		]
		]
		element initrd {
			k.initrd.attlist,
			text
		}
}

#==========================================
# common element <instrepo>
#
div {
	#k.instrepo.name.attribute = k.id.attribute
	k.instrepo.name.attribute = 
		attribute name { xsd:ID }
	k.instrepo.priority.attribute =
		## Search priority for packages in this repo
		attribute priority { text }
	k.instrepo.username.attribute = k.username.attribute
	k.instrepo.pwd.attribute = k.pwd.attribute
	k.instrepo.local.attribute =
		attribute local { xsd:boolean }
	k.instrepo.attlist =
		k.instrepo.name.attribute &
		k.instrepo.priority.attribute &
		k.instrepo.username.attribute? &
		k.instrepo.pwd.attribute? &
		k.instrepo.local.attribute?
	k.instrepo =
		## Name of a Installation Repository
		[
		db:para [
			"Name of a repository which is used to create an\x{a}" ~
			"installation source\x{a}"~
			"The Priority specifies the order the repositories are\x{a}"~
			"layered when looking for a package.\x{a}"~
			"Username and pwd are the credentials for ftp access.\x{a}"~
			"The local attribute tells kiwi to use hardlinks instead of\x{a}"~
			"downloads in case the source and destination trees are on\x{a}"~
			"the same machine."
		]
		]
		element instrepo {
			k.instrepo.attlist,
			k.source
		}
}

#==========================================
# common element <kernel>
#
div {
	k.kernel.attlist = empty
	k.kernel =
		## Specifies Where to Find the Boot Kernel
		[
		db:para [
			"As part of the network deploy configuration this section\x{a}" ~
			"specifies the where to find the boot kernel."
		]
		]
		element kernel {
			k.kernel.attlist,
			text
		}
}

#==========================================
# common element <keytable>
#
div {
	k.keytable.attlist = empty
	k.keytable =
		## Image keytable setup.
		[
		db:para [
			"The value will be part of /etc/sysconfig/keyboard"
		]
		]
		element keytable {
			k.keytable.attlist,
			text
		}
}

#==========================================
# common element <locale>
#
div { # locale
	k.locale.attlist = empty
	k.locale =
		## Image locale setup.
		[
		db:para [
			"The value will be part of /etc/sysconfig/keyboard"
		]
		]
		element locale {
			k.locale.attlist,
			locale-name
		}
}

#==========================================
# common element <boot-theme>
#
div { # boot-theme
	k.boot-theme.attlist = empty
	k.boot-theme =
		## Image bootsplash/gfxboot theme setup.
		[
		db:para [
			"The value will be part used in suseGFXBoot"
		]
		]
		element boot-theme {
			k.boot-theme.attlist,
			text
		}
}

#==========================================
# common element <metadata>
#
div {
	k.metadata.attlist = empty
	k.metadata =
		## Contains Metadata
		[
		db:para [
			"When building an installation source not only packages are\x{a}" ~
			"relevant but also metadata. metadata are files or packages\x{a}"~
			"combined with script calls. If a package is specified as\x{a}"~
			"metadata it will not be installed by rpm but its cpio\x{a}"~
			"archive is extracted in a specific way."		    
		]
		]
		element metadata {
			k.metadata.attlist &
			k.repopackage+ &
			k.metafile* &
			k.chroot*
		}
}

#==========================================
# common element <metafile>
#
div {
	k.metafile.url.attribute =
		## URL where to find the metafile
		attribute url { text }
	k.metafile.script.attribute = k.script.attribute
	k.metafile.target.attribute =
		## Destination path where to download the file
		attribute target { text }
	k.metafile.attlist =
		k.metafile.url.attribute &
		k.metafile.script.attribute &
		k.metafile.target.attribute
	k.metafile =
		## A file Pointer Optionally Bundled With a Script
		element metafile {
			k.metafile.attlist,
			empty
		}
}

#==========================================
# common element <opensusePattern>
#
div {
	k.opensusepattern.name.attribute = k.name.attribute
	k.opensusepattern.arch.attribute = k.arch.attribute
	k.opensusepattern.attlist =
		k.opensusepattern.name.attribute &
		k.opensusepattern.arch.attribute?
	k.opensusepattern =
		## Name of a Pattern From openSUSE
		element opensusePattern {
			k.opensusepattern.attlist,
			empty
		}
}

#==========================================
# common element <opensuseProduct>
#
div {
	k.opensuseproduct.name.attribute = k.name.attribute
	k.opensuseproduct.arch.attribute = k.arch.attribute
	k.opensuseproduct.attlist =
		k.opensuseproduct.name.attribute &
		k.opensuseproduct.arch.attribute?
	k.opensuseproduct =
		## Name of a Product From openSUSE
		element opensuseProduct {
			k.opensuseproduct.attlist,
			empty
		}
}

#==========================================
# common element <repopackage>
#
div {
	k.repopackage.name.attribute = k.name.attribute
	k.repopackage.arch.attribute = k.arch.attribute
	k.repopackage.forcerepo.attribute =
		## Specifies the search priority
		attribute forcerepo { xsd:IDREF }
	k.repopackage.addarch.attribute =
		## Specifies that this package should
		## additionally add the same package from the given arch
		attribute addarch { text }
	k.repopackage.removearch.attribute =
		## Specifies that the package with the
		## given arch should be removed
		attribute removearch { text }
	k.repopackage.onlyarch.attribute =
		## Specifies that the package with
		## the given arch should be used in any case
		attribute onlyarch { text }
	k.repopackage.medium.attribute =
		## Specifies that the package will be put
		## to the specific medium number (CD1, DVD7, ...)
		attribute medium { xsd:nonNegativeInteger }
	k.repopackage.source.attribute = k.source.attribute
	k.repopackage.script.attribute = k.script.attribute
	k.repopackage.attlist =
		k.repopackage.name.attribute & 
		k.repopackage.arch.attribute? &
		k.repopackage.forcerepo.attribute? &
		k.repopackage.addarch.attribute? &
		k.repopackage.removearch.attribute? &
		k.repopackage.onlyarch.attribute? &
		k.repopackage.source.attribute? &
		k.repopackage.script.attribute? &
		k.repopackage.medium.attribute?
	k.repopackage =
		## Name of an instsource Package
		element repopackage {
			k.repopackage.attlist,
			empty
		}
}

#==========================================
# common element <package>
#
div {
	k.package.name.attribute = k.name.attribute
	k.package.arch.attribute = k.arch.attribute
	k.package.replaces.attribute = k.replaces.attribute
	k.package.bootinclude.attribute = k.bootinclude.attribute
	k.package.bootdelete.attribute = k.bootdelete.attribute
	k.package.attlist =
		k.package.name.attribute &
		k.package.arch.attribute? &
		k.replaces.attribute? &
		k.bootdelete.attribute? &
		k.bootinclude.attribute?
	k.package =
		## Name of an image Package
		element package {
			k.package.attlist,
			empty
		}
}

#==========================================
# common element <archive>
#
div {
	k.archive.name.attribute = k.name.attribute
	k.archive.bootinclude.attribute = k.bootinclude.attribute
	k.archive.attlist =
		k.archive.name.attribute &
		k.archive.bootinclude.attribute?
	k.archive =
		## Name of an image archive file (tarball)
		element archive {
			k.archive.attlist,
			empty
		}
}

#==========================================
# common element <packagemanager>
#
div {
	k.packagemanager.content = "smart" | "zypper" | "ensconce"
	k.packagemanager.attlist = empty
	k.packagemanager =
		## Name of the Package Manager
		[
		db:para [
			"The package manager used for package installation\x{a}"~
			"could be either zypper or smart"
		]
		]
		element packagemanager {
			k.packagemanager.attlist,
			k.packagemanager.content
		}
}

#==========================================
# common element <partitions>
#
div {
	k.partitions.device.attribute =
		## As part of the network deploy configuration this section
		## specifies the disk device name
		attribute device { text }
	k.partitions.attlist = k.partitions.device.attribute?
	k.partitions =
		## A List of Partitions
		element partitions { 
			k.partitions.attlist, 
			k.partition+
		}
}

#==========================================
# common element <partition>
#
div {
	k.partition.type.attribute =
		## Partition Type identifier, see fdisk for details
		attribute type { text }
	k.partition.number.attribute =
		## Partition ID
		attribute number { text }
	k.partition.size.attribute = k.size.attribute
	k.partition.mountpoint.attribute = 
		## Mount path for this partition
		attribute mountpoint { text }
	k.partition.target.attribute =
		## Is a real target or not which means is part of
		## the /etc/fstab file or not
		attribute target { xsd:boolean }
	k.partition.attlist =
		k.partition.type.attribute &
		k.partition.number.attribute & 
		k.partition.size.attribute? &
		k.partition.mountpoint.attribute? &
		k.partition.target.attribute?
	k.partition =
		## A Partition
		element partition {
			k.partition.attlist,
			empty
		}
}

#==========================================
# common element <persistent>
#
div {
	k.persistent.attlist = empty
	k.persistent =
		## Specifies Filenames in the Read-Write Disk Area
		[
		db:para [
			"As part of the split section the persistent element\x{a}"~
			"specifies filenames which are in the read-write disk area"
		]
		]
		element persistent {
			k.persistent.attlist &
			k.except* &
			k.file+
		}
}

#==========================================
# common element <profile>
#
div {
	k.profile.name.attribute = k.name.attribute
	k.profile.description.attribute =
		## Description of how this profiles influences the image
		attribute description { text }
	k.profile.import.attribute =
		## Import profile by default if no profile was set on
		## the commandline
		attribute import { xsd:boolean }
	k.profile.attlist =
		k.profile.name.attribute &
		k.profile.description.attribute &
		k.profile.import.attribute?
	k.profile =
		## Creates Profiles
		[
		db:para [
			"Profiles creates a namespace on an image description and\x{a}"~
			"thus can be used to have one description with different\x{a}"~
			"profiles for example KDE and GNOME including different\x{a}"~
			"packages."
		]
		]
		element profile {
			k.profile.attlist,
			empty
		}
}

#==========================================
# common element <repository>
#
div {
	k.repository.type.attribute =
	  ## Type of repository
	  attribute type {
		"apt-deb" | "apt-rpm" | "deb-dir" | "mirrors" | "red-carpet" |
		"rpm-dir" | "rpm-md"  | "slack-site" | "up2date-mirrors" | "urpmi" |
		"yast2"
	}
	k.repository.status.attribute =
		## Specifies the status of the repository. This can be
		## replacable or if not specified it's a must have repository
		attribute status { "replaceable" | "fixed" }
	k.repository.alias.attribute =
		## Alias name to be used for this repository. This is an
		## optional free form text. If not set the source attribute
		## value is used and builds the alias name by replacing
		## each '/' with a '_'. An alias name should be set if the
		## source argument doesn't really explain what this repository
		## contains
		attribute alias { text }
	k.repository.priority.attribute =
		## Channel priority assigned to all packages available in
		## this channel (0 if not set). If the exact same package
		## is available in more than one channel, the highest
		## priority is used
		attribute priority { xsd:integer }
	k.repository.attlist =
		k.repository.type.attribute &
		k.repository.status.attribute? &
		k.repository.alias.attribute? &
		k.repository.priority.attribute?
	k.repository =
		## The Name of the Repository
		element repository {
			k.repository.attlist,
			k.source
		}
}

#==========================================
# common element <rpm-check-signatures>
#
div {
	k.rpm-check-signatures.content = xsd:boolean
	k.rpm-check-signatures.attlist = empty
	k.rpm-check-signatures =
		## Setup a Package Signature
		[
		db:para [
			"Setup if the package manager should check the package\x{a}"~
			"signature or not. This option could be ignored according\x{a}"~
			"to the used package manager."
		]
		]
		element rpm-check-signatures {
			k.rpm-check-signatures.attlist,
			k.rpm-check-signatures.content
		}
}

#==========================================
# common element <rpm-excludedocs>
#
div {
	k.rpm-excludedocs.content = xsd:boolean
	k.rpm-excludedocs.attlist = empty
	k.rpm-excludedocs =
		## Setup a Package Signature
		[
		db:para [
			"Setup if the package manager should exclude docs files\x{a}"~
			"during package installation. This option could be ignored\x{a}"~
			"according to the used package manager."
		]
		]
		element rpm-excludedocs {
			k.rpm-excludedocs.attlist,
			k.rpm-excludedocs.content
		}
}

#==========================================
# common element <rpm-force>
#
div {
	k.rpm-force.content = xsd:boolean
	k.rpm-force.attlist = empty
	k.rpm-force =
		## Force the Installation of a Package
		[
		db:para [
			"Setup if the package manager should force the install of the\x{a}"~
			"package or not. This option could be ignored according\x{a}"~
			"to the used package manager."
		]
		]
		element rpm-force {
			k.rpm-force.attlist,
			k.rpm-force.content
		}
}

#==========================================
# common element <oem-swapsize>
#
div {
	k.oem-swapsize.attlist = empty
	k.oem-swapsize =
		## For oemboot driven images: Set the size of the swap
		## partition in MB
		[
		db:para [
			"For oemboot driven images: Set the size of the swap\x{a}"~
			"partition in MB. No swapspace with oem-swap set to false."
		]
		]
		element oem-swapsize {
			k.oem-swapsize.attlist,
			xsd:nonNegativeInteger
		}
}

#==========================================
# common element <oem-systemsize>
#
div {
	k.oem-systemsize.attlist = empty
	k.oem-systemsize =
		## For oemboot driven images: Set the size of the system
		## (root) partition in MB
		[
		db:para [
			"For oemboot driven images: Set the size of the system\x{a}"~
			"(root) partition in MB."
		]
		]
		element oem-systemsize {
			k.oem-systemsize.attlist,
			xsd:nonNegativeInteger
		}
}

#==========================================
# common element <oem-recoveryID>
#
div {
	k.oem-recoveryID.attlist = empty
	k.oem-recoveryID =
		## For oemboot driven images: Set the partition ID of
		## recovery partition. Default value is 83 (Linux)
		[
		db:para [
			"For oemboot driven images: Set the partition ID of\x{a}"~
			"recovery partition. Default value is 83 (Linux)"
		]
		]
		element oem-recoveryID {
			k.oem-recoveryID.attlist,
			xsd:nonNegativeInteger
		}
}

#==========================================
# common element <oem-inplace-recovery>
#
div {
	k.oem-inplace-recovery.content = xsd:boolean
	k.oem-inplace-recovery.attlist = empty
	k.oem-inplace-recovery =
		## For oemboot driven images: Specify whether the
		## recovery archive should be stored as part of the image
		## or not. If it's not stored it's created during install
		## of the oem image
		[
		db:para [
			"For oemboot driven images: Specify whether the\x{a}"~
			"recovery archive should be stored as part of the image\x{a}"~
			"or not. If it's not stored it's created during install\x{a}"~
			"of the oem image"
		]
		]
		element oem-inplace-recovery {
			k.oem-inplace-recovery.attlist,
			k.oem-inplace-recovery.content
		}
}

#==========================================
# common element <oem-swap>
#
div {
	k.oem-swap.content = xsd:boolean
	k.oem-swap.attlist = empty
	k.oem-swap =
		## For oemboot driven images: use a swap partition yes/no
		[
		db:para [
			"For oemboot driven images: use a swap partition yes/no."
		]
		]
		element oem-swap {
			k.oem-swap.attlist,
			k.oem-swap.content
		}
}

#==========================================
# common element <oem-home>
#
div {
	k.oem-home.content = xsd:boolean
	k.oem-home.attlist = empty
	k.oem-home =
		## For oemboot driven images: use a home partition yes/no
		[
		db:para [
			"For oemboot driven images: use a home partition yes/no."
		]
		]
		element oem-home {
			k.oem-home.attlist,
			k.oem-home.content
		}
}

#==========================================
# common element <oem-recovery>
#
div {
	k.oem-recovery.content = xsd:boolean
	k.oem-recovery.attlist = empty
	k.oem-recovery =
		## For oemboot driven images: create a recovery archive yes/no
		[
		db:para [
			"For oemboot driven images: create a recovery archive yes/no"
		]
		]
		element oem-recovery {
			k.oem-recovery.attlist,
			k.oem-recovery.content
		}
}

#==========================================
# common element <oem-boot-title>
#
div {
	k.oem-boot-title.attlist = empty
	k.oem-boot-title =
		## For oemboot driven images: setup of the boot menu text
		## displayed within the square brackets after first reboot
		## of the OEM image 
        [
		db:para [
			"For oemboot driven images: setup of the boot menu text\x{a}"~
			"displayed within the square brackets after first reboot\x{a}"~
			"of the OEM image."
		]
		]
		element oem-boot-title {
			k.oem-boot-title.attlist,
			text
		}
}

#==========================================
# common element <oem-kiwi-initrd>
#
div {
	k.oem-kiwi-initrd.content = xsd:boolean
	k.oem-kiwi-initrd.attlist = empty
	k.oem-kiwi-initrd =
		## For oemboot driven images: use kiwi initrd in any case
		## and don't replace it with mkinitrd created initrd
		[
		db:para [
			"For oemboot driven images: use kiwi initrd in any case\x{a}"~
            "and don't replace it with mkinitrd created initrd"
		]
		]
		element oem-kiwi-initrd {
			k.oem-kiwi-initrd.attlist,
			k.oem-kiwi-initrd.content
		}
}

#==========================================
# common element <oem-sap-install>
#
div {
	k.oem-sap-install.content = xsd:boolean
	k.oem-sap-install.attlist = empty
	k.oem-sap-install =
		## For oemboot driven images: tag the image to be an SAP
		## appliance. This causes some checks inside the initrd
		## to become activated as well as a the media changer is
		## started in early preinit
		[
		db:para [
			"For oemboot driven images: tag the image to be an SAP\x{a}"~
			"appliance. This causes some checks inside the initrd\x{a}"~
			"to become activated as well as a the media changer is\x{a}"~
			"started in early preinit"
		]
		]
		element oem-sap-install {
			k.oem-sap-install.attlist,
			k.oem-sap-install.content
		}
}

#==========================================
# common element <oem-reboot>
#
div {
	k.oem-reboot.content = xsd:boolean
	k.oem-reboot.attlist = empty
	k.oem-reboot =
		## For oemboot driven images: reboot after first deployment yes/no
		[
		db:para [
			"For oemboot driven images: reboot after first deployment yes/no."
		]
		]
		element oem-reboot {
			k.oem-reboot.attlist,
			k.oem-reboot.content
		}
}

#==========================================
# common element <oem-dumphalt>
#
div {
	k.oem-dumphalt.content = xsd:boolean
	k.oem-dumphalt.attlist = empty
	k.oem-dumphalt =
		## For oemboot driven images: halt after image dump yes/no
		[
		db:para [
			"For oemboot driven images: reboot the system after image\x{a}"~
			"has been dumped (installed) on the target disk. A message\x{a}"~
			"appears and the system waits for a key event before reboot"
		]
		]
		element oem-dumphalt {
			k.oem-dumphalt.attlist,
			k.oem-dumphalt.content
		}
}

#==========================================
# common element <size>
#
div {
	k.size.unit.attribute =
		## The unit of the image
		attribute unit { "M" | "G" }
	k.size.additive.attribute =
		attribute additive { xsd:boolean }
	k.size.attlist =
		k.size.unit.attribute? &
		k.size.additive.attribute?
	k.size =
		## Specifies the Size of an Image in (M)egabyte or (G)igabyte
		## If the attribute additive is set the value will be added
		## to the required size of the image
		element size {
			k.size.attlist,
			text
		}
}

#==========================================
# common element <source>
#
div {
	k.source.path.attribute = k.path.attribute
	k.source.attlist = k.source.path.attribute
	k.source =
		## A Pointer to a Repository/Package Source
		element source {
			k.source.attlist,
			empty
		}
}

#==========================================
# common element <specification>
#
div {
	k.specification.attlist = empty
	k.specification =
		## A Detailed Description
		[
		db:para [
			"A detailed description of this image and what it can be\x{a}"~
			"used for."
		]
		]
		element specification {
			k.specification.attlist,
			text
		}
}

#==========================================
# common element <temporary>
#
div {
	k.temporary.attlist = empty
	k.temporary =
		## Specifies Files in RAM
		[
		db:para [
			"As part of the split section the temporary element\x{a}"~
			"specifies file names which are in the RAM disk area."
		]
		]
		element temporary {
			k.temporary.attlist &
			k.except* &
			k.file+
		}
}

#==========================================
# common element <timeout>
#
div {
	k.timeout.attlist = empty
	k.timeout = 
		## Specifies an ATFTP Download Timeout
		[
		db:para [
			"As part of the network deploy configuration this section \x{a}"~
			"specifies an ATFTP download timeout"
		]
		]
		element timeout {
			k.timeout.attlist,
			text
		}
}

#==========================================
# common element <timezone>
#
div {
	k.timezone.attlist = empty
	k.timezone =  
		## Setup Image Timezone setup
		[
		db:para [
			"Image timezone setup. The value will be used to search\x{a}"~
			"the correct timezone and copy it to /etc/localtime."
		]
		]
		element timezone {
			k.timezone.attlist,
			text
		}
}

#==========================================
# common element <type>
#
div {
	k.type.fsnocheck.attribute =
		## Turn off periodic filesystem checks on ext2/3/4.
		attribute fsnocheck { xsd:boolean }
	k.type.lvm.attribute =
		## Specify whether LVM should be used or not. This is effective
		## for the types oem,usb and vmx
		attribute lvm { xsd:boolean }
	k.type.lvmgroup.attribute =
		## Specify Volume group name, default is kiwiVG.
		attribute lvmgroup { text }
	k.type.baseroot.attribute =
		## Specify the path to a pre created base root system.
		attribute baseroot { text }
	k.type.bootprofile.attribute =
		## Specifies the boot profile defined in the boot image
		## description. When kiwi builds the boot image the
		## information is passed as add-profile option
		attribute bootprofile { text }
	k.type.bootkernel.attribute =
		## Specifies the kernel boot profile defined in the boot
		## image description. When kiwi builds the boot image the
		## information is passed as add-profile option
		attribute bootkernel { text }
	k.type.boot.attribute =
		## Specifies the path of the boot image (initrd), relative
		## to /usr/share/kiwi/image
		attribute boot { text }
	k.type.checkprebuilt.attribute =
		## Activates whether KIWI should search for a prebuild boot
		## image or not
		attribute checkprebuilt { xsd:boolean }
	k.type.volid.attribute =
		## for the iso type only:
		## Specifies the volume ID (volume name or label) to be written
		## into the master block. There is space for 32 characters.
		attribute volid { text }
	k.type.flags.attribute =
		## Specifies flags for the image type. This could be compressed
		## unified or dmsquash and applies to the iso type only
		attribute flags {
			"unified" | "compressed" | "dmsquash" | "clic"
		}
	k.type.hybrid.attribute =
		## for the iso type only:
		## Specifies that the iso file should be turned into
		## a hybrid iso file. It's required to use the vmxboot
		## boot image to boot that iso though
		attribute hybrid { xsd:boolean }
	k.type.bootloader.attribute =
		## Specifies the bootloader used for booting the image."
		## At the moment only grub and syslinux are supported
		attribute bootloader {
			"grub" | "syslinux"
		}
	k.type.compressed.attribute =
		## Specifies whether the image output file should be
		## compressed or not. This makes only sense for filesystem
		## only images respectively for the pxe or cpio type
		attribute compressed { xsd:boolean }
	k.type.vga.attribute =
		## Specifies the kernel framebuffer mode. More information
		## about the possible values can be found by calling
		## hwinfo --framebuffer or in /usr/src/linux/Documentation/fb/vesafb.txt
		attribute vga { text }
	k.type.luks.attribute =
		## Setup cryptographic volume along with the given filesystem
		## using the LUKS extension. The value of this attribute
		## represents the password string used to be able to
		## mount that filesystem while booting
		attribute luks { text }
	k.type.filesystem.attribute = 
		## Specifies the filesystem which can be one of:
		## ext2 , ext3 , ext4, reiserfs ,squashfs, clicfs or dmsquash.
		## dmsquash is an ext3 filesystem packed into a squashfs
		## and used later with a device mapper snapshot. clicfs
		## is a fuse based compressed filesystem using a cow
		## file for write operations
		attribute filesystem {
			"ext2" | "ext3" | "ext4" | "reiserfs" |
			"squashfs" | "dmsquash" | "clicfs"
		}
	k.type.fsreadonly.attribute =
		## Specifies the filesystem for the read-only part of a split image
		attribute fsreadonly {
			"ext2" | "ext3" | "ext4" | "reiserfs" | "squashfs"
		}
	k.type.fsreadwrite.attribute =
		## Specifies the filesystem for the read-write part of a split image
		attribute fsreadwrite {
			"ext2" | "ext3" | "ext4" | "reiserfs"
		}
	k.type.ec2privatekeyfile.attribute =
		## AWS user's PEM encoded RSA private key file
		attribute ec2privatekeyfile { text }
	k.type.ec2certfile.attribute =
		## AWS user's PEM encoded RSA pubkey certificate file
		attribute ec2certfile { text }
	k.type.ec2accountnr.attribute =
		## The user's EC2 user ID (Note: AWS account number, NOT Access Key ID)
		attribute ec2accountnr { xsd:nonNegativeInteger }
	k.type.format.attribute =
		## Specifies the format of the virtual disk. This applies to the
		## vmx/oem types only.
		attribute format {
			"vvfat" | "vpc" | "bochs" | "dmg" | "cloop" | "vmdk" | "qcow" |
			"cow" | "iso" | "usb" | "ovf" | "qcow2"
		}
	k.type.primary.attribute =
		## Specifies the primary type (choose KIWI option type)
		attribute primary { xsd:boolean }
	k.type.attlist =
		k.type.fsnocheck.attribute? &
		k.type.lvm.attribute? &
		k.type.lvmgroup.attribute? &
		k.type.checkprebuilt.attribute? &
		k.type.bootprofile.attribute? &
		k.type.bootkernel.attribute? &
		k.type.boot.attribute? &
		k.type.volid.attribute? &
		k.type.flags.attribute? &
		k.type.hybrid.attribute? &
		k.type.bootloader.attribute? &
		k.type.compressed.attribute? &
		k.type.vga.attribute? &
		k.type.luks.attribute? &
		k.type.filesystem.attribute? &
		k.type.fsreadonly.attribute? &
		k.type.fsreadwrite.attribute? &
		k.type.ec2privatekeyfile.attribute? &
		k.type.ec2certfile.attribute? &
		k.type.ec2accountnr.attribute? &
		k.type.baseroot.attribute? &
		k.type.format.attribute? &
		k.type.primary.attribute?
	k.type =
		## The Image Type of the Logical Extend
		element type { 
			k.type.attlist, 
			text 
		}
}

#==========================================
# common element <volume>
#
div {
	k.volume.name.attribute =
		## volume name. The name specifies a path which has to
		## exist inside the root directory.
		attribute name { text }
	k.volume.freespace.attribute =
		## free space to be added to this volume. The value is
		## used as MB by default but you can add "M" and/or "G" as
		## prefix
		attribute freespace { text }
	k.volume.size.attribute =
		## absolute size of the volume. If the size value
		## is too small to store all data it will be ignored.
		## The value is used as MB by default but you can
		## add "M" and/or "G" as prefix
		attribute size { text }
	k.volume.attlist =
		k.volume.freespace.attribute? &
		k.volume.size.attribute? &
		k.volume.name.attribute
	k.volume =
		## Specify which parts of the filesystem should be
		## on a extra volume.
		[
		db:para [
			"Specify which parts of the filesystem should be onextra\x{a}"
			"a extra volume."
		]
		]
		element volume {
			k.volume.attlist,
			empty
		}
}


#==========================================
# common element <lvmvolumes>
#
div {
	k.lvmvolumes.attlist = empty
	k.lvmvolumes =
		## Specify LVM volumes other than the root volume
		[
		db:para [
			"Specify LVM volumes other than the root volume."
		]
		]
		element lvmvolumes {
			k.lvmvolumes.attlist &
			k.volume+
		}
}

#==========================================
# common element <union>
#
div {
	k.union.ro.attribute =
		## Device only for read-only 
		attribute ro { text }
	k.union.rw.attribute =
		## Device for Read-Write
		attribute rw { text }
	k.union.type.attribute = attribute type { "aufs" | "unionfs" | "clicfs" }
	k.union.attlist =
		k.union.ro.attribute &
		k.union.rw.attribute &
		k.union.type.attribute
	
	k.union =  
		## Specifies the Overlay Filesystem
		[
		db:para [
			"As part of the network deploy configuration this section\x{a}"~
			"specifies the overlay filesystem setup if required by the\x{a}"~
			"filesystem type of the system image.An overlay setup is only\x{a}"~
			"required if the system image uses a squashfs\x{a}"~
			"compressed filesystem."
		]
		]
		element union {
			k.union.attlist,
			empty
		}
}

#==========================================
# common element <user>
#
div {
	k.user.name.attribute = k.name.attribute
	k.user.id.attribute = 
		## The user ID for this user
		attribute id { xsd:nonNegativeInteger }
	k.user.realname.attribute =
		## The name of an user
		attribute realname { text }
	k.user.pwd.attribute = k.pwd.attribute
	k.user.home.attribute =
		## The home directory for this user
		attribute home { text }
	k.user.shell.attribute =
		## The shell for this user
		attribute shell { text }
	k.user.attlist =
		k.user.name.attribute &
		k.user.id.attribute? &
		k.user.realname.attribute? &
		k.user.pwd.attribute &
		k.user.home.attribute &
		k.user.shell.attribute?
	k.user =
		## A User with Name, Password, Path to Its Home And Shell
		element user {
			k.user.attlist &
			empty
		}
}

#==========================================
# common element <version>
#
div {
	k.version.attlist = empty
	k.version =
		## A Version Number for the Image, Consists of Major.Minor.Release 
		element version {
			k.version.attlist &
			text
		}
}

#==========================================
# common element <vmwarenic>
#
div {
	k.vmwarenic.driver.attribute =
		## The driver used for the VM network interface
		attribute driver { text }
	k.vmwarenic.interface.attribute =
		## The interface ID for the VM network interface
		attribute interface { xsd:nonNegativeInteger }
	k.vmwarenic.mode.attribute =
		## The VM network mode
		attribute mode { text }
	k.vmwarenic.attlist =
		k.vmwarenic.driver.attribute &
		k.vmwarenic.interface.attribute &
		k.vmwarenic.mode.attribute
	k.vmwarenic =
		## The VMware network interface definition
		element vmwarenic {
			k.vmwarenic.attlist &
			empty
		}
}

#==========================================
# common element <vmwaredisk>
#
div {
	k.vmwaredisk.controller.attribute =
		## The disk controller used for the VMware guest
		attribute controller { "ide" | "scsi" }
	k.vmwaredisk.id.attribute =
		## The disk ID for the VM disk
		attribute id { xsd:nonNegativeInteger }
	k.vmwaredisk.attlist =
		k.vmwaredisk.controller.attribute &
		k.vmwaredisk.id.attribute
	k.vmwaredisk =
		## The VMware disk definition. You can setup either a
		## scsi disk or an ide disk
		element vmwaredisk {
			k.vmwaredisk.attlist &
			empty
		}
}

#==========================================
# common element <vmwarecdrom>
#
div {
	k.vmwarecdrom.controller.attribute =
		## The CD/DVD controller used for the VMware guest
		attribute controller { "ide" | "scsi" }
	k.vmwarecdrom.id.attribute =
		## The CD/DVD ID for the VM CD rom drive
		attribute id { xsd:nonNegativeInteger }
	k.vmwarecdrom.attlist =
		k.vmwarecdrom.controller.attribute &
		k.vmwarecdrom.id.attribute
	k.vmwarecdrom =
		## The VMware CD/DVD drive definition. You can setup either a
		## scsi CD or an ide CD drive
		element vmwarecdrom {
			k.vmwarecdrom.attlist &
			empty
		}
}

#==========================================
# common element <xendisk>
#
div {
	k.xendisk.device.attribute =
		## The disk device to appear in the Xen guest
		attribute device { text }
	k.xendisk.attlist =
		k.xendisk.device.attribute
	k.xendisk =
		## The Xen disk device definition.
		element xendisk {
			k.xendisk.attlist &
			empty
		}
}

#==========================================
# common element <xenbridge>
#
div {
	k.xenbridge.mac.attribute =
		## The Mac address to assign to the virtual interface
		attribute mac { text }
	k.xenbridge.name.attribute =
		## The Xen bridged interface name
		attribute name { text }
	k.xenbridge.attlist =
		k.xenbridge.mac.attribute ? &
		k.xenbridge.name.attribute
	k.xenbridge =
		## The VMware network interface definition
		element xenbridge {
			k.xenbridge.attlist &
			empty
		}
}

#==========================================
# main block: <deploy>
#
div {
	k.deploy.server.attribute =
		## Name or IP Address of server for downloading the data
		attribute server { text }
	k.deploy.blocksize.attribute = 
		## Blocksize value used for atftp downloads
		attribute blocksize { text }
	k.deploy.attlist =
		k.deploy.server.attribute? &
		k.deploy.blocksize.attribute?
	k.deploy =
		## Controls the Image Deploy Process
		[
		db:para [
			"The deploy section is used to allow kiwi to create the\x{a}"~
			"config.<MAC> file required by PXE based network images.\x{a}"~
			"the contents of this file controls the image deploy process."
		]
		]
		element deploy {
			k.deploy.attlist &
			k.timeout? &
			k.commandline? &
			k.kernel? &
			k.initrd? &
			k.partitions? &
			k.union? &
			k.configuration*
		}
}

#==========================================
# main block: <description>
#
div {
	k.description.type.attribute = 
		## Kiwi distinguishes between two basic image description types
		## which uses the same format but one is created and provided by
		## the kiwi developers and the other is created by the users of
		## kiwi. The type=boot specifies a boot image (initrd) which should
		## be provided by the kiwi developers wheras type=system specifies
		## a standard image description created by a kiwi user.
		attribute type { "boot" | "system" }
	k.description.attlist = k.description.type.attribute
	k.description =  
		## A Short Description
		element description {
			k.description.attlist &
			k.author &
			k.contact+ &
			k.specification
		}
}

#==========================================
# main block: <drivers>
#
div {
	k.drivers.type.attribute = attribute type {
		"drivers" | "usbdrivers" | "scsidrivers" | "netdrivers"
	}
	k.drivers.profiles.attribute = k.profiles.attribute
	k.drivers.attlist = 
		k.drivers.type.attribute &
		k.drivers.profiles.attribute?
		
	k.drivers =
		## A Collection of Driver Files 
		element drivers {
			k.drivers.attlist &
			k.file+
		}
}

#==========================================
# main block: <instsource>
#
div {
	k.instsource.attlist = empty
	k.instsource =
		## Describe Packages and Metadata
		[
		db:para [
			"The instsource element is used to describe the packages\x{a}"~
			"and the metadata which is required to build an installation\x{a}"~
			"source suitable for Novell SUSE Linux installation media.\x{a}"~
			"From such a source it should be possible to create the\x{a}"~
			"standard SUSE CDs and DVDs as well as use this source as\x{a}"~
			"repository for image building."
		]
		]
		element instsource {
			k.instsource.attlist &
			k.architectures &
			k.productoptions &
			k.instrepo+ &
			k.metadata &
			k.repopackages*
		}
}

#==========================================
# main block: <architectures>
#
div {
	k.architectures.attlist = empty
	k.architectures =
		## Describe Packages and Metadata
		[
		db:para [
			"The architectures element contains a list of architectures\x{a}"~
			"for which the installation source is designed. At least one\x{a}"~
			"architecture must be defined. Fallback mecahnisms apply.\x{a}"~
			"Each arch element has an optional attribute <fallback>\x{a}"~
			"which is the next in the chain. An omitted value results in\x{a}"~
			"undefined value thus terminating the chain."
		]
		]
		element architectures {
			k.architectures.attlist &
			k.arch+ &
			k.requiredarch+
		}
}

#==========================================
# main block: <productoptions>
#
div {
	k.productoptions.attlist = empty
	k.productoptions =
		## Describe Packages and Metadata
		[
		db:para [
			"The productoptions element contains a list of options\x{a}"~
			"that influence the instsource creation process in a\x{a}"~
			"general manner. For instance an option could specify\x{a}"~
			"a default medium number for source packages and the like."
		]
		]
		element productoptions {
			k.productoptions.attlist &
			k.productoption* &
			k.productinfo* &
			k.productvar*
		}
}

#==========================================
# main block: <productoption>
#
div {
	k.productoption.attlist = k.name.attribute

	k.productoption =
		## Describe Packages and Metadata
		[
		db:para [
			"The productoption element carries the information for a\x{a}"~
			"product option its name and its fallback (productoptional)."
		]
		]
		element productoption {
			k.productoption.attlist &
			text
			#k.productinfo.text.content	
			#xsd:normalizedString { maxLength = "2048" }
		}
}

#==========================================
# main block: <arch>
#
div {
	k.arch.name.attribute = k.name.attribute
        k.arch.id.attribute = k.id.attribute
        k.arch.fallback.attribute = attribute fallback { xsd:IDREF }

	k.arch.attlist = k.arch.id.attribute &
			 k.arch.name.attribute &
			 k.arch.fallback.attribute?

	k.arch =
		## Describe Packages and Metadata
		[
		db:para [
			"The arch element providdes the information for an arch,\x{a}"~
			"its name and its fallback (optional)."
		]
		]
		element arch {
			k.arch.attlist &
			empty
		}
}

#==========================================
# main block: <requiredarch>
#
div {
        k.requiredarch.ref.attribute = attribute ref { xsd:IDREF }

	k.requiredarch.attlist = k.requiredarch.ref.attribute

	k.requiredarch =
		## Describe Packages and Metadata
		[
		db:para [
			"The requiredarch element defines which  architectures\x{a}"~
			"are the basic required ones for the media."
		]
		]
		element requiredarch {
			k.requiredarch.attlist &
			empty
		}
}

#==========================================
# main block: <productinfo>
#
div {
	k.productinfo.attlist = k.name.attribute 
	k.productinfo =
		## Describe Packages and Metadata
		[
		db:para [
			"The productinfo element contains one particular environment\x{a}"~
			"variable and its value. Shell rules for the names apply.\x{a}"~
			"The value must not exceed a certain length for sanity.\x{a}"~
			"reasons Any funny characters like tabs, line break,\x{a}"~
			"carriage return or combinations are converted to spaces\x{a}"~
			"(one each) which may lead to unexpected contents."
		]
		]
		element productinfo {
			k.productinfo.attlist &
			# text: workaround for the above mentioned problem
			text
			#k.productinfo.text.content	
			#xsd:normalizedString { maxLength = "2048" }
		}
}

#==========================================
# main block: <productvar>
#
div {
	k.productvar.attlist =
		k.name.attribute 
	k.productvar =
		## Describe Packages and Metadata
		[
		db:para [
			"The productinfo element contains one particular environment\x{a}"~
			"variable and its value. Shell rules for the names apply.\x{a}"~
			"The value is used to create the content file."
		]
		]
		element productvar {
			k.productvar.attlist &
			# text: workaround for the above mentioned problem
			text
			#k.productvar	
			#xsd:normalizedString { maxLength = "2048" }
		}
}

#==========================================
# main block: <chroot>
#
div {
	k.chroot.attlist = attribute requires { text } 

	k.chroot =
		## Describe Packages and Metadata
		[
		db:para [
			"The chroot element contains one particular environment\x{a}"~
			"variable and its value. Shell rules for the names apply.\x{a}"~
			"The value must not exceed a certain length for sanity.\x{a}"~
			"reasons Any funny characters like tabs, line break, \x{a}"~
			"carriage return or combinations are converted to spaces\x{a}"~
			"(one each) which may lead to unexpected contents."
		]
		]
		element chroot {
			k.chroot.attlist &
			text
		}
}

#==========================================
# main block: <repopackages>
#
div {
	k.repopackages.attlist = empty
	k.repopackages =  
		## Specifies Packages for Installation Source
		[
		db:para [
			"The repopackages elements specifies a set of packages which\x{a}"~
			"are used for creating a Novell SUSE installation source."
		]
		]
		element repopackages {
			k.repopackages.attlist &
			k.repopackage*
		}
}

#==========================================
# main block: <vmwareconfig>
#
div {
	k.vmwareconfig.arch.attribute = 
		## the VMware architecture type
		attribute arch { "ix86" | "x86_64" | "%arch" }
	k.vmwareconfig.HWversion.attribute =
		## The virtual HW version number for the VMware configuration
		attribute HWversion { xsd:integer }
	k.vmwareconfig.guestOS.attribute =
		## the virtual guestOS identification string for VMware
		attribute guestOS { text }
	k.vmwareconfig.memory.attribute =
		## The memory setup for the guest VM.
		attribute memory { text }
	k.vmwareconfig.usb.attribute =
		## Activate/Deactivate usb controller for VMware
		attribute usb { xsd:boolean }
	k.vmwareconfig.attlist =
		k.vmwareconfig.arch.attribute? &
		k.vmwareconfig.HWversion.attribute? &
		k.vmwareconfig.guestOS.attribute? &
		k.vmwareconfig.usb.attribute? &
		k.vmwareconfig.memory.attribute
	k.vmwareconfig =
		## specifies the VMware configuration sections
		[
		db:para [
			"The vmwareconfig element specifies the VMware guest\x{a}"~
			"configuration options which are used by the VMware\x{a}"~
			"virtual machine when running the image."
		]
		]
		element vmwareconfig {
			k.vmwareconfig.attlist &
			k.vmwarenic ? &
			k.vmwaredisk ? &
			k.vmwarecdrom ?
		}
}

#==========================================
# main block: <xenconfig>
#
div {
	k.xenconfig.memory.attribute =
		## The memory setup for the Xen guest.
		attribute memory { text }
	k.xenconfig.domain.attribute =
		## The type of Xen domain to create (dom0 or domU)
		attribute domain { "dom0" | "domU" }
	k.xenconfig.attlist =
		k.xenconfig.memory.attribute ? &
		k.xenconfig.domain.attribute ?
	k.xenconfig =
		## specifies the Xen configuration sections
		[
		db:para [
			"The xenconfig element specifies the Xen guest\x{a}"~
			"configuration options which are used by the Xen\x{a}"~
			"para virtual machine when running the image."
		]
		]
		element xenconfig {
			k.xenconfig.attlist &
			k.xendisk ? &
			k.xenbridge*
		}
}

#==========================================
# main block: <packages>
#
div {
	k.packages.type.attribute = attribute type {
		"image" | "bootstrap" | "delete" | "testsuite" | "xen" | "vmware"
	}
	k.packages.profiles.attribute =
		## Namespace this section applies to. If not specified it
		## applies to all namespaces
		attribute profiles { text }
	k.packages.patternType.attribute =
		## Selection type for patterns. Could be onlyRequired
		## plusSuggested or plusRecommended
		attribute patternType {
			"onlyRequired" | "plusSuggested" | "plusRecommended"
		}
	k.packages.patternPackageType.attribute =
		## Selection type for packages in patterns. Could be
		## onlyRequired, plusSuggested or plusRecommended
		attribute patternPackageType {
			"onlyRequired" | "plusSuggested" | "plusRecommended"
		}
	k.packages.attlist =
		k.packages.type.attribute &
		k.packages.profiles.attribute? &
		k.packages.patternType.attribute? &
		k.packages.patternPackageType.attribute?
	k.packages =
		## Specifies Packages/Patterns Used in Different Stages
		[
		db:para [
			"The packages elements specifies a set of packages\x{a}"~
			"and/or patterns which are used in different stages of the\x{a}"~
			"image building process\x{a}"~
			"and also depends of the selected image output type."
		]
		]
		element packages {
			k.packages.attlist &
			k.package* &
			k.opensusepattern* &
			k.opensuseproduct* &
			k.ignore* &
			k.archive*
		}
}

#==========================================
# main block: <preferences>
#
div {
	k.preferences.profiles.attribute = k.profiles.attribute
	k.preferences.attlist =
		k.preferences.profiles.attribute?
	k.preferences =  
		## Configuration Information Needed for Logical Extend
		element preferences {
			k.preferences.attlist &
			k.type* &
			k.version? &
			k.size? &
			k.oem-swap? &
			k.oem-home? &
			k.oem-boot-title? &
			k.oem-kiwi-initrd? &
			k.oem-sap-install? &
			k.oem-swapsize? &
			k.oem-systemsize? &
			k.oem-recovery? &
			k.oem-recoveryID? &
			k.oem-inplace-recovery? &
			k.oem-reboot? &
			k.oem-dumphalt? &
			k.packagemanager? &
			k.rpm-check-signatures? &
			k.rpm-excludedocs? &
			k.rpm-force? &
			k.keytable? &
			k.timezone? &
			k.locale? &
			k.boot-theme? &
			k.defaultdestination? &
			k.defaultroot? &
			k.defaultbaseroot?
		}
}

#==========================================
# main block: <profiles>
#
div {
	k.profiles.attlist = empty
	k.profiles =  
		## Creates Namespace Section for Drivers
		[
		db:para [
			"Namespace section which creates a namespace and the\x{a}"~
			"drivers can bind itself to one of the listed namespaces."
		]
		]
		element profiles {
			k.profiles.attlist &
			k.profile+
		}
}

#==========================================
# main block: <split>
#
div {
	k.split.attlist = empty
	k.split =  
		## Describes Images in Read-Only and Read-Write Portions
		[
		db:para [
			"When the image type split is requested the image will be\x{a}"~
			"splitted into a read-only and a read-write image portion.\x{a}"~
			"Each portion can have different filesystems and the split\x{a}"~
			"section describes which files/directories should go in\x{a}"~
			"what portion."
		]
		]
		element split {
			k.split.attlist &
			k.temporary? &
			k.persistent?
		}
}

#==========================================
# main block: <users>
#
div {
	k.users.group.attribute =
		## Contains the group to which the user belongs
		attribute group { text }
	k.users.id.attribute =
		## Contains the group ID to which the user belongs
		attribute id { xsd:nonNegativeInteger }
	k.users.attlist = k.users.group.attribute
		& k.users.id.attribute ?
	k.users = 
		## A List of Users
		element users {
			k.users.attlist &
			k.user+
		}
}

